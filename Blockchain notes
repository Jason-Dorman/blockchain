Blockchain notes:

- You need a blockchain node to interact with the Blockchain
- The blockchain is the single source of truth in the whole system
	- a shared legder for all participants which can get access to the same data
- There are infrastructure providers to abstract running blockchains away from developers and users that make onboarding easy 

Etherium transactions:
	How transactions are handled in any library than can do transactions:

		sendTransaction: obj

			Parameters:

			object: The transaction object to send
				from: str|int # The address for the sending account.
				to: str # The destination address of the message, left undefined for a contract-creation transaction.
				value: int|str|BigNumber # (optional) The value transferred for the transaction in wei, also the endowment if it's a contract-creation transaction
				gas: int # (optional), default: TBD) the amount of gas to use for the transaction (unused gas is refunded)
				gasPrice: int|str|BigNumber # (optional) The price of gas for this transaction in wei
				data: str # (optional) Either a ABI byte string containing the data of the function call on a contract, or in the case of a contract-creation transaction the initiallisation code.
				nonce: int # (optional) int of a nonce. This allows to overwite your own pending transactions that use the same nonce incremented to avoid replay attacks
				callback: Function # (optional) Optional callback, returns an error object as first parameter and the result as second

Blockchain knows the transaction isn't malicious becuase it uses signatures
	
	signTransaction function signs a transaction.
	The account needs to be unlocked with a private key.

	When the transaction is signed you get reurn values including, 
		v
		r
		s
		hash

	These allow you to verify it is NOT a malicious transaction.

	private keys are a randomized string of 32 bytes(characters) long of 64 hex characters
	0x121212121212121212121212121212

	Private keys are sent through an Elliptic Curve Digital Signature Algorithm to a public key (64 bytes)

	Signatures are generated from private keys
	Public keys and addresses are generated from private keys

Cryptograghic hashing:
	cryptographic hash functions take an input and create a "digest" - essentially a coded message

	The ideal cryptographic hash function has five main properties
		- It is deterministic so the same message always results in the same hash
			- basically the output of the hash is always the same
		- It's quick to compute the hash value for any given message
		- Not possible to guess what the message is from the hash value
		- A small change to the message should change the hash value so drastically that the new hash value appears uncorrelated to the old hash value
		- It's not possible to find two different messages with the same hash value

		- In blockchain hashing: The hash value of a transaction is recorded on every node on the network. Every new transaction creates a new hash value even if it incorporates an older hash value. So if you were trying to change a hash you would need to change it on every node - which is why it's so secure. You couldn't just break into one system, you'd need to break into all of the systems and access all of the hashes and all of the couples of the hashes for what you were trying to target. 

		- Hashing is the mathenatical foundation of blockchains. Without hashing there is no blockchian. 
		- Blocks contain all hashes of previous blocks
			- that's how they're all chained togeher 
		- If you change information in one of the previous blocks it changes all of the blocks after that.

Smart contracts:
	- a piece of code runnimg on the blockchain
		- it's a state machine
		- needs transactions to change state
		- can do logic operations

	- Statechange happens thought mining and transactions

	- Solidity is turing complete 
		- meaning in theory it can solve any computation problem

	- every ehtereum node in the network executes the same code because every node has a copy of the chain

Understanding blockchain nodes: 
	- Can have a main network and a private network. Data will be different on both networks. If you start a chain on a private network you can keep that data from being passed to the main network. This is useful for banks or governments where data privacy is not only needed but a requirement.
	- You can start blocks on the main network and then fork it to the private network which gives you the blocks from the main network before the fork and then data on private network after the fork will be different. 
	- If you start a private network you start with a genesis block which has to be configured. 

	- Main networks are persistent meaning they cost money and are immutable, can't take them back. Real blockchain and costs money.
		- Then there are test networks: which are persistent but can be deleted. Also real blockchain and a copy of the main network. Where you can test smart contracts, see if you can onboard beta users, etc. Used for beta releases.
			- There is also developer networks like Ganache used for unit testing.. fast but not persistent. Perfect for testing. 

	- All nodes use ethereum protocol - same way of storing and accessing data.

Understanding Accounts:
	- Two different kinds of accounts:
		- contract accounts
			- inside blockchain
			- managed by code rather than private keys
		- externally owned accounts
			- uses private keys 
			- used to send funds and initiate transactions

	- Transactions with smart contract accounts must to be triggered by externally owned accounts
			- live outside of blockchain but can access blockcahin

Understanding addresses:
	- All information is public
		- ledger is shared by all participants
		- how much money is stored on each address is stored on the ledger (it's not stored on your address or account or wallet)
		- your wallet/account stores a private key which generates a public key which generates an address
		- The blockchain is the database that stores how much is owned by which address
	- In solidity addresses have two important members:
	 - .balance # which stores the amount in wei
	 - .transfer # you can transfer any amount from your smart contract to an address

	 	address myAddress = "0xabc123"
	 		myAddress.balance
	 		myAddress.transfer(amountInWei)

	- Global object "message":
		- msg.sender - address of the account that initialized the transaction
		- msg.value - how much ether was sent
		- now - current timestamp

	- "payable" must be used in function in order to recieve ether

VARIABLE TYPES
*** need a better understanding of mapping***
*** mappings and structs are a powerful combination***
Mapping:
	- similar to hash maps
	- mapping(_keyType => _valueType) name;
	- the key type can be any elementary type. Meaning it can be any of the built in value types plus bytes and strings
	- value types can be any type including mappings
	- Example: A classic yes/no flag basically to indicate if an address can interact with the contract (or not)
	  	mapping (address => bool) addressAllowed;
	  	addressAllowed[someAddress] = true;
	- benefit is the values don't have to be initialized because they're initialized by default
	- mqppings also don't have a length (like an array does)
	- if you make a mapping public it automatically becomes a getter function that can be acccessed
	- mappings can be iterable by using a library (see solidity documentation)


Structs:
	- structs allow you to create your own data structures or types
	- you can call variables defined in the struct like you would call a variable in a class except you don't need the "class"/ struct name first
	- Example:
		contract MappingStructExample {
    
		    struct Payment {
		        uint amount;
		        uint timestamps;
		    }
		    
		    struct Balance {
		        uint totalBalance;
		        uint numPayments; // provides an output like a print that tells you the number of payments received by the contract
		        mapping(uint => Payment) payments;
		    }
	- structs are similar to using a class to define variables that can be accessed but in solidity it's more effecient (meaning you use less gas) to set up structs rather than something similar to a class (in solidity it would be another contract)

Arrays:
	- Arrays can be fixed or dynamic in length
	- fixed array:
		T[a,b,c] // fixed array with length a,b,c
		T[] // dynamic array - basically an empty list
		T[][5] // gives you 5 dynamic arrays
	- Arrays cause problems on blockchains because iterating over them increases gas costs. For that reason it's almost always better to use mappings

Enums:
	- enums are one way to create a user defined type in solidity
	- will be integers internally so the following directions are stored as integers:
		enum actionChoices {goLeft, goRight, goStraight, sitStill}
		actionChoices choice;
		actionChoices constant defaultChoice = actionChoices.goStraight

uint256:
	- this is a data structure that needs to assigned to the amount of the transaction
		contract exceptionExample {
    
	    mapping(address => uint) public balanceRecieved;
	    
	    function recieveMoney() public payable {
	        balanceRecieved[msg.sender] += msg.value;
	    }
	    
	    function withdrawMoney(address payable _to, uint _amount) public {
	        if(_amount <= balanceRecieved[msg.sender]) {
	            balanceRecieved[msg.sender] -= _amount;
	            _to.transfer(_amount);
	        }
	    }
	}

Exception handling:
	
	Transactions & Errors:
		- Transactions are atomic meaning errors are "state reverting"
			- this means if an assert, require, or revert throws an error everything that happened in previous functions will have their state reverted to the previous state before the function was executed
		- require, assert, revert
			- essentially "throw"
		- They cascade - meaning if an exception is thrown in a seperate contract it will revert high level funtions in another contract that is interacting with the contract that threw the exception - low level functions will not cascade to include:
			- address.send, address.call, address.delegatecall, address.staticcall
		- Catching is not possible in solidity - instead the transaction is simply terminated
			- catching can however happen outside of solidity
		- revert and require can return an error string

	Assert vs. Require
		- Require reverts
			- returns remaining gas when require terminates the transaction
		- Assert creates an invalid operation
			- consumes all gas
		- Assert is used to validate invariants (internal variables)
		- require is used to validate user input
		- Assert is also triggered if you code something wrong
			- reach an array out of bounds or an index error
			- division by zero
			- byteshifting by a negative amount
			- convert a value too big or a negative to enum
			- zero-initialized variable of internal function type
			- or assert(x) where x evaluates to false
		- requires can also be triggered:
			- require(x) where x evaluates to false
			- function call via message call but it doesn't finish properly
				- except low level function calls
			- external function call to a contract not containing any code
			- your contract recieves ether at a getter function
			- address.transfer() fails
	Revert statements:
		- Pretty much does the same thing as require
		- reverts the transaction
		- really comes down to a preference between revert and require

	Key takeaways:
		- USE REQUIRE FOR INPUT VALIDATION
		- USE ASSERT FOR CHECKING INTERNAL STATES

Functions:
	Setter and getter functions:
		- getter functions are usually view functions
		- writing transactions: transactions (need to be mined)
		- Reading transactions are called a call
			- calls are executed against local blockchain node
			- calls don't need to be mined
			- basically if you don't need to change anything, you don't need to inform other participants on the blockchain
			- Reading is free (no gas cost)
		- There are two different kinds of functions for reading values from a smart contract.
			- View functions: Reading from the state and from other view functions
			- Pure functions: Not reading or modifying the state but they can interact with other pure functions
				- View and pure functions are only against your local blockchain node
					- they don't need mining.
	Function Visibility:
		- Public 
			- can be caled internally and externally
			- Can also be inherited in another smart contract
		- Private
			- Only for the contract, not externally reachable and not via derived contracts
		- External
			- Can be called from other contracts
			- Can be called externally
		- Internal
		- Only from the contract itself or from derived contracts. Can't be invoked by a transaction
	Constructors:
		- use keyword "constructor" rather than function
		- Only called once during deployment
		- Can't be called afterwards
		- Is either public or internal
	Fallback functions:
		- Mostly used to receive ether as a simple transaction but beware of the gas limit
		- A function without a name: "function()"
		- Called when a transaction without a function-call is sent to the smart contract
			- called when you send ether to a smart contract without interacting with any functions
		- Called when the function-call in the transaction isn't found
			- like if you misspell the function name. So evm can't find function name and defaults to the fallback function
		- Can only be external
		- Contracts receiving ether without a fallback function and without a function call with throw an exception
		- You cannot completely avoid receiving ether
			- Miner reward or selfdestruct(address) will forcefully credit ether
		- Worst case: You can only rely on 2300 gas
			- _contractAddress.transfer(1 ether); send only 2300 gas along
		- Forcefully prevent contract execution if called with contract data
			- require(msg.data.length==0)

Inheritance:
	- a contract can inherit multiple contracts

Modifiers:
	- change behavior of functions
	- automatically check a pre-condition

Events and return values:
	- EVM provides a logging functionality
		- event MyEvent(uint _arg1, address indexed _arg2)
			- Up to 3 parameters in an event can be indexed.
			- That means they are hashed and can be searched for later on in the site chain. So if you want to be able to go back in histoy and search for something you can
	- Used for return values from transactions
	- Used externally to trigger functionality (like a third party approval of a transaction)
	- Used as a cheap data storage
	You should use events as return values for the reasons below: Events are a good way to give you an idea about what's happening in a smart contract
	- Writing transactions cannot return values or data externally
		- They return a transaction hash
		- That creates a problem because the hash can be in a few differnt states before it's actually mined. Transactions can take a long time to complete or may fail.
		- So events are used to inform external users something happened on the blockchain
	- Events as data storage:
		- Problem: Storing Data is EXTREMELY expensive on Ethereum Blockchain
		- Solution:
			- Store data off-chain and store only a proof(hash) as Notary
			- Store data in another blockchain such as IPFS
			- Store data in event logs if not necessary
				- if data is not needed directly by the smart contract put it in a log
		- Events in dApps
			- Applications can subscribe and listen to these events through the RPC interface of an etherreum client.
			- Events are inheritable members of contracts
			- The log and its event data is not accessible from within contracts
			- indexed event parameters can be searched for later.

Smart Contract Deployment lifecycle:
	- Create the smart contract by writing it in solidity.
	- That gets comiled in bytecode and runs on the EVM. In the bycode is the function signatures which get compared to the data field of the transaction.
	- Then you send the transaction to the network without the reciever (or data). Then later you send the transactions on the smart contract on a specific address.

	- Interaction:
		- In remix when you deploy the smart contract the Web3 library does the calculations to create the right hash
		- That uses an ABI (application binary interface) array to interact with the smart contract. The ABI array contains all the functions/parameters/return values of the contract in essentially a json format.
		- The reason for the ABI array is that smart contracts on the blockchain are just binary. 
			- Client software doesn't know the interfaces so it needs to be told via an external configuration which is the ABI.
		- A function signature is created in a hash encoded in the first 4 bytes of the keccak256 hash.
			- web3.js or eth.js basically takes care of encoding.

	- Debugging:
		- Activated in a plugin.
		- Debug step by step - no breakpoints
		- Transaction based - you step into after it happens not while it happens.
		- Shows gas costs for Opcodes, stack, and memory
			- decent amount of details
		- Relatively good for prototyping.

	- Gas prices
		- Prices vary based on demand but consumption is constant
		- When developing on mainnet you can set your own gas price. The higher the gas cost the faster the transaction is verified by encentivizing miners.
		- avoid loops - they get pricey 

-Using Libraries:
	- Cannot recieve ether to a library
	- Cannot be inherited or inherit
	- Used to extend functionality and potentially make your smart contracts safer
	- Not used to upgrade smart contracts you need a different structure for that. 
		- https://vomtom.at/upgrade-smart-contracts-on-chain/



